* 第三天


** Major Mode 和 Minor Mode


*** Major Mode

**** WHAT
有且只有一个
Major Mode 通常是定义对于一种文件类型编辑的核心规则，例如语法高亮、缩进、快捷键绑定等


*** Minor Mode

**** WHAT
有且可有多个
而 Minor Mode 是除去 Major Mode 所提供的核心功能以外的额外编辑功能（辅助功能）


*** 查看 Mode 命令

**** HOW

C-h m


** Elisp

*** WHAT
这是一门函数式语言


*** 定义变量

**** HOW

#+BEGIN_SRC emacs-lisp
(setq 变量名 值)
#+END_SRC


*** 定义函数

**** HOW

#+BEGIN_SRC emacs-lisp
  (defun 函数名 ()
    (指令1)
    (指令2)
    (...))
#+END_SRC


*** 定义可调用函数

**** WHAT
可以调用的函数
使用 interactive
只要想要 '函数 那样使用，就必须加 interactive

**** HOW

#+BEGIN_SRC emacs-lisp
  (defun 函数名 ()
    (interactive)
    (指令))
#+END_SRC

**** EXAMPLE

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "按键") '函数)
#+END_SRC


*** 执行函数

**** HOW

#+BEGIN_SRC emacs-lisp
  (函数名)
#+END_SRC

**** EXAMPLE

#+BEGIN_SRC emacs-lisp
  (defun open-my-config ()
    (interactive)
    (dired "~/.config/emacs/lisp/"))

  (global-set-key (kbd "<f6>") 'open-my-config)
#+END_SRC

 
** 设置


*** 补全(暂时使用而已)

#+BEGIN_SRC emacs-lisp
  ;; 系统自带的提示功能
  (setq tab-always-indent 'complete)
  ;; M-x 有补全
  (icomplete-mode t)
#+END_SRC


*** 括号补全

#+BEGIN_SRC emacs-lisp
  ;; 括号补全
  (electric-pair-mode t)
#+END_SRC


*** 关闭启动界面

#+BEGIN_SRC emacs-lisp
  ;; 关闭启动界面
  (setq inhibit-startup-screen t)
#+END_SRC


*** 启动最大化

#+BEGIN_SRC emacs-lisp
  ;; 自动最大化
  (toggle-frame-maximized)
#+END_SRC


*** 关闭各种栏

#+BEGIN_SRC emacs-lisp
  ;; 关闭工具栏，tool-bar-mode 即为一个 Minor Mode
  (tool-bar-mode -1)

  ;; 关闭 menu-bar
  (menu-bar-mode 0)

  ;; 关闭文件滑动控件
  (scroll-bar-mode -1)

  ;; 显示行号
  (global-display-line-numbers-mode t)
#+END_SRC


*** 改变光标模式

#+BEGIN_SRC emacs-lisp
  ;; 改变光标模式
  ;; (setq cursor-type 'box)
  ;; 其实是不行，因为只是局部变量
  (setq cursor-type 'bar)
  ;; 正确写法
  (setq-default cursor-type 'bar)
#+END_SRC


*** 查看快捷键按钮

C-x C-h


*** 快速打开配置文件

#+BEGIN_SRC emacs-lisp
  ;; 定义 open-init-file 函数
  ;; 使用 find-file 功能，打开拼接了 init.el 的字符串地址
  (defun open-init-file()
    (interactive)
    (find-file (concat user-emacs-directory "init.el")))

  ;; 将 open-init-file 绑定在 F5键  
  (global-set-key (kbd "<f5>") 'open-init-file)
#+END_SRC


*** 设置快捷键查看函数

#+BEGIN_SRC emacs-lisp
  ;; 快捷键查找函数
  (global-set-key (kbd "C-h C-f") 'find-function)
#+END_SRC


*** 执行当前缓冲区所有 Lisp 命令

M-x eval-buffer


*** 设置字体(好像没用)

#+BEGIN_SRC emacs-lisp
  ;; http://stackoverflow.com/questions/294664/how-to-set-the-font-size-in-emacs
  (set-face-attribute 'default nil :height 160)
#+END_SRC


*** 手动安装 Comany

#+BEGIN_SRC emacs-lisp
  ;; 开启全局 Company 补全
  (global-company-mode 1)
  ;; 多少字符开始提示补全
  (setq company-minimum-prefix-length 1)
  ;; 补全提醒时间
  (setq company-idle-delay 0)

  ;; company mode 默认选择上一条和下一条候选项命令 M-n M-p
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous)
#+END_SRC


*** 滚轮设置

#+BEGIN_SRC emacs-lisp
  ;;让鼠标滚动更好用
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC


** 学习 Elisp


*** Elisp 简单例子

#+BEGIN_SRC emacs-lisp
  ;; 2 + 2
  (+ 2 2)

  ;; 2 + 3 * 4
  (+ 2 (* 3 4))

  ;; 定义变量
  (setq name "username")
  (message name) ; -> "username"

  ;; 定义函数
  (defun func ()
    (message "Hello, %s" name))

  ;; 执行函数
  (func) ; -> Hello, username

  ;; 设置快捷键
  (global-set-key (kbd "<f1>") 'func)

  ;; 使函数可直接被调用可添加 (interactive)
  (defun func ()
    (interactive)
    (message "Hello, %s" name))
#+END_SRC


** 一丢丢 Org 知识


*** TODO

按 C-c C-t 可以变成 TODO 或 DONE
