* 第十四天 精选 packages


** consult-ripgrep 在 windows 失效
*** HOW

#+begin_src emacs-lisp
  ;; make consult-ripgrep work
  (add-to-list 'process-coding-system-alist 
               '("[rR][gG]" . (utf-8-dos . windows-1251-dos)))
#+end_src


** iedit

*** WHAT

一个 Buffer 修改所有字符串

*** HOW

#+begin_src emacs-lisp
  ;; iedit - edit same text in one buffer or region
  (use-package iedit
    :bind ("C-;" . iedit-mode)
  )
#+end_src


** multiple-cursors
*** WHAT

取代 iedit 的 插件

可以多光标操作

不过可能会跟 Fcitx5 的 快捷键 Ctrl + ; 冲突
=> Input Method => Configure addons => Clipboard => Trigger Key

*** HOW

#+begin_src emacs-lisp
  ;; 块选择器
  (use-package multiple-cursors
    :bind
    ("C-S-c C-S-c" . 'mc/edit-lines)
    ("C->"         . 'mc/mark-next-like-this)
    ("C-<"         . 'mc/mark-previous-like-this)
    ("C-M->"       . 'mc/skip-to-next-like-this)
    ("C-M-<"       . 'mc/skip-to-previous-like-this)
    ("C-c C-<"     . 'mc/mark-all-like-this)
    ("M-<mouse-1>" . 'mc/add-cursor-on-click)
    ;; 要关闭 Fcitx5 的 C-; clipboard 快捷键
    ("C-;"         . 'mc/mark-all-symbols-like-this)
    ("C-:"         . 'mc/mark-all-symbols-like-this-in-defun)
    )
#+end_src


** expand-region

*** WHAT

*** HOW

#+begin_src emacs-lisp
  (use-package expand-region
    :config
    (defadvice er/prepare-for-more-expansions-internal
        (around helm-ag/prepare-for-more-expansions-internal activate)
      ad-do-it
      (let ((new-msg (concat (car ad-return-value)
                             ", H to highlight in buffers"
                             ", / to search in project, "
                             "e iedit mode in functions"
                             "f to search in files, "
                             "b to search in opened buffers"))
            (new-bindings (cdr ad-return-value)))
        (cl-pushnew
         '("H" (lambda ()
                 (interactive)
                 (call-interactively
                  'zilongshanren/highlight-dwim)))
         new-bindings)
        (cl-pushnew
         '("/" (lambda ()
                 (interactive)
                 (call-interactively
                  'my/search-project-for-symbol-at-point)))
         new-bindings)
        (cl-pushnew
         '("e" (lambda ()
                 (interactive)
                 (call-interactively
                  'evil-multiedit-match-all)))
         new-bindings)
        (cl-pushnew
         '("f" (lambda ()
                 (interactive)
                 (call-interactively
                  'find-file)))
         new-bindings)
        (cl-pushnew
         '("b" (lambda ()
                 (interactive)
                 (call-interactively
                  'consult-line)))
         new-bindings)
        (setq ad-return-value (cons new-msg new-bindings))))
    )
#+end_src

#+begin_src emacs-lisp
  ;; 添加一个快捷键，让标记和搜索功能更方便：
  ;;;###autoload
  (defun my/search-project-for-symbol-at-point ()
    (interactive)
    (if (use-region-p)
        (progn
          (consult-ripgrep (project-root (project-current))
                           (buffer-substring (region-beginning) (region-end))))))

  (global-definer
    "hc" 'zilongshanren/clearn-highlight
    "hH" 'zilongshanren/highlight-dwim
    "v" 'er/expand-region
    )
#+end_src


** interactive replace

*** WHAT

*** HOW

#+begin_src emacs-lisp
  (defun zilongshanren/evil-quick-replace (beg end )
    (interactive "r")
    (when (evil-visual-state-p)
      (evil-exit-visual-state)
      (let ((selection (regexp-quote (buffer-substring-no-properties beg end))))
        (setq command-string (format "%%s /%s//g" selection))
        (minibuffer-with-setup-hook
            (lambda () (backward-char 2))
          (evil-ex command-string)))))

  (define-key evil-visual-state-map (kbd "C-r") 'zilongshanren/evil-quick-replace)
#+end_src


** 安装 quelpa 插件
*** WHAT

从 Github 下载 package

*** HOW

#+begin_src emacs-lisp
  (use-package quelpa)

  (unless (package-installed-p 'quelpa-use-package)
    (quelpa
     '(quelpa-use-package
       :fetcher git
       :url "https://github.com/quelpa/quelpa-use-package.git"))
    )

  (use-package quelpa-use-package
    :init
    (setq quelpa-use-package-inhibit-loading-quelpa t)
    :demand t
    )
#+end_src


** symbol-overlay & highlight-global

*** HOW

#+begin_src emacs-lisp
  (defun zilongshanren/highlight-dwim ()
    (interactive)
    (if (use-region-p)
        (progn
          (highlight-frame-toggle)
          (deactivate-mark))
      (symbol-overlay-put))
    )

  (defun zilongshanren/clearn-highlight ()
    (interactive)
    (clear-highlight-frame)
    (symbol-overlay-remove-all)
    )

  (use-package symbol-overlay
    :config
    (define-key symbol-overlay-map (kbd "h") 'nil)
    )

  (use-package highlight-global
    :ensure nil
    :commands (highlight-frame-toggle)
    :quelpa (highlight-global :fetcher github :repo "glen-dai/highlight-global")
    :config
    (progn
      (setq-default highlight-faces
                    '(('hi-red-b . 0)
                      ('hi-aquamarine . 0)
                      ('hi-pink . 0)
                      ('hi-blue-b . 0))))
    )
#+end_src

