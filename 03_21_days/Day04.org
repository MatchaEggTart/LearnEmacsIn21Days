* 第四天


** lexical binding

*** WHAT
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]]
一个检查格式语法的规范，利于并发

*** HOW

.el 文件最上面加入

#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-
#+END_SRC

*** EXAMPLE

#+BEGIN_SRC emacs-lisp
  ;;在文件最开头添加地个 文件作用域的变量设置，设置变量的绑定方式
  ;; -*- lexical-binding: t -*-
  (let ((x 1))    ; x is lexically bound.
    (+ x 3))
       ⇒ 4

  (defun getx ()
    x)            ; x is used free in this function.

  (let ((x 1))    ; x is lexically bound.
    (getx))
  ;;error→ Symbol's value as variable is void: x
#+END_SRC


** package

*** WHAT
包管理器

*** HOW
#+BEGIN_SRC emacs-lisp
  ;; Version 28
  (require 'package)
  (setq package-archives '(("gnu"   . "http://elpa.zilongshanren.com/gnu/")
			   ("melpa" . "http://elpa.zilongshanren.com/melpa/")))
  (package-initialize)

  ;;防止反复调用 package-refresh-contents 会影响加载速度
  (when (not package-archive-contents)
    (package-refresh-contents))

  ;; Version 29
  ;; 配置源
  ;; (message package-archives)
  (use-package package
    :config
    (add-to-list 'package-archives '("melpa"         . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/"))
    (add-to-list 'package-archives '("melpa-stable"  . "http://mirrors.tuna.tsinghua.edu.cn/elpa/stable-melpa/"))
    (add-to-list 'package-archives '("gnu"           . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/"))
    (add-to-list 'package-archives '("gnu-devel"     . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu-devel/"))
    (add-to-list 'package-archives '("nongnu"        . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/"))
    (add-to-list 'package-archives '("nongnu-devel"  . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu-devel/"))
    (add-to-list 'package-archives '("org"           . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/"))
    (unless (bound-and-true-p package--initialized)
      (package-initialize))
    (progn
      ;; 不检查签名，国内镜像如果正在同步，会导致安装签名失败
      (setq package-check-signature nil
	    load-prefer-newer t)
      ;; 防止反复调用 package-refresh-contents 会影响加载速度
      (when (not package-archive-contents)
	(package-refresh-contents)))
    )

  ;; 配置 use-package 默认设置
  (require 'use-package-ensure)
  (setq use-package-always-ensure t
	use-package-always-defer t
	use-package-always-demand nil
	use-package-expand-minimally t
	use-package-verbose t)

  ;; 默认使用 melpa-stable
  (setq use-package-always-pin "melpa-stable")

#+END_SRC


** keycast

*** WHAT
Emacs 提示 输入快捷键的插件

*** HOW

#+BEGIN_SRC emacs-lisp
  ;; modeline上显示我的所有的按键和执行的命令
  (package-install 'keycast)
  (keycast-mode t)

  ;; user-package 用法
  (use-package keycast
    :ensure t
    :hook
    (after-init . keycast-mode)
    )

#+END_SRC


** vertico 和 orderless

*** WHAT
增强 minibuffer 补全，比 ivy swiper 组合更快，M-x 会触发 vertico，orderless 可以让 vertico 模糊搜索

*** HOW

**** 普通使用

#+BEGIN_SRC emacs-lisp
  ;; 必须关闭 icomplete-mode
  ;; (icomplete-mode t)

  (package-install 'vertico)
  (vertico-mode t)

  (package-install 'orderless)
  (setq completion-styles '(orderless))
#+END_SRC

**** use-package 管理

#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; 模糊搜索
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

***** 


** marginalia

*** WHAT
 
增强 minibuffer 提示， 命令会有提示， minibufuffer 可以显示 文件大小权限， 按键功能会有了提示
按 C-h v 可有查看变量的值

*** HOW
**** 普通使用

#+BEGIN_SRC emacs-lisp
  (package-install 'marginalia)
  (marginalia-mode t)
#+END_SRC

**** use-package 管理

#+BEGIN_SRC emacs-lisp
  ;; 增强 minibuffer， 可以显示各种值跟其他数据
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+END_SRC


** embark

*** WHAT
绑定快捷键后，可以使用快捷键查找function源文件或者快捷键等功能，有点像 which-key
也可以直接搜索功能，就能使用指令，不需要记住快捷键

*** HOW
**** 普通使用

#+BEGIN_SRC emacs-lisp
  (package-install 'embark)
  (global-set-key (kbd "C-;") 'embark-act)
  (setq prefix-help-command 'embark-prefix-help-command)
#+END_SRC

**** use-package 管理

#+BEGIN_SRC emacs-lisp
  ;; 在 函数 使用 C-. 可以看到函数的详细信息
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; 可以不用记快捷键， 按 C-x C-h， 然后输入快捷键大概内容
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC


** consult

*** WHAT
增强文件内搜索和跳转函数定义，即强化 C-s C-r
swiper 替代者

*** HOW
**** 普通使用

#+BEGIN_SRC emacs-lisp
  (package-install 'consult)
  ;;replace swiper
  (global-set-key (kbd "C-s") 'consult-line)
  ;;consult-imenu
#+END_SRC

**** use-package 管理

#+BEGIN_SRC emacs-lisp
  ;; 建议版本
  ;; C-s C-r 搜索增强
  ;; sudo dnf install ripgrep || sudo pacman -S ripgrep
  (use-package consult
    ;; :ensure t
    :bind
    ("C-s" . consult-line)
    ;; ("C-x b" . consult-buffer)
    ("C-c p s" . consult-ripgrep)
    )

  ;; 官方例子
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
	   ("C-c h" . consult-history)
	   ("C-c m" . consult-mode-command)
	   ("C-c k" . consult-kmacro)
	   ;; C-x bindings (ctl-x-map)
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ;; M-g bindings (goto-map)
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings (search-map)
	   ("M-s d" . consult-find)
	   ("M-s D" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key (kbd "M-.")
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
      ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
      ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
      ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
      ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    )
#+END_SRC
