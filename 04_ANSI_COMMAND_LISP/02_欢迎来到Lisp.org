* 形式（Form）

** WHAT

Lisp 是一门交互式的语言
任何 Lisp 系统都含有一个交互式的前端，叫做顶层(toplevel)
你在顶层输入 Lisp 表达式，而系统会显示它们的值

** EXAMPLE

一个最简单的Lisp表达式是整数

#+begin_src lisp
  > 1
  1
#+end_src

表达式

#+begin_src lisp
  > (+)
  0
  > (+ 2 3)
  5
  > (+ 2 3 4 5)
  14
#+end_src

在表达式 (+ 2 3) 里， + 称为操作符，而数字 2 跟 3 称为实参
在 Lisp 里， + 可以接受任意数量的实参，包含了没有实参
操作符在前的表达式，也叫 前序表达式

表达式可以嵌套，即表达式里的实参可以是另一个复杂的表达式

#+begin_src lisp
  > (/ (- 7 1) (- 4 2))
  3
#+end_src

所有的 Lisp 表达式，要么是 1 这样的数原子，要么是包在括号里，由零个或多个表达式所构成的列表，以下是合法的 Lisp 表达式

#+begin_src lisp
2 (+ 2 3) (+ 2 3 4) (/ (- 7 1) (- 4 2))
#+end_src

合法但没用


* 求值 (Evaluation)

** WHAT

在 Lisp 里， + 是函数，然而如 (+ 2 3) 的表达式，是函数调用

*** 当 Lisp 对函数调用求值时，它做下列两个步骤：

1. 首先从左至右对实参求值。在这个例子当中，实参对自身求值，所以实参的值分别是 2 跟 3
2. 实参的值传入以操作符命名的函数。在这个例子当中，将 2 跟 3 传给 + 函数，返回 5

*** 如果实参本身是函数调用的话，上述规则同样适用。以下是当 (/ (- 7 1) (- 4 2)) 表达式被求值时的情形：

1. Lisp 对 (- 7 1) 求值: 7 求值为 7 ， 1 求值为 1 ，它们被传给函数 - ，返回 6
2. Lisp 对 (- 4 2) 求值: 4 求值为 4 ， 2 求值为 2 ，它们被传给函数 - ，返回 2
3. 数值 6 与 2 被传入函数 / ，返回 3

** ATTENTION

但不是所有的 Common Lisp 操作符都是函数，不过大部分是
函数调用都是这么求值
由左至右对实参求值，将它们的数值传入函数，来返回整个表达式的值。这称为 Common Lisp 的求值规则

*** 逃离麻烦

如果你试着输入 Lisp 不能理解的东西，它会打印一个错误讯息，接着带你到一种叫做中断循环（break loop）的顶层
中断循环给予有经验的程序员一个机会，来找出错误的原因，不过最初你只会想知道如何从中断循环中跳出
如何返回顶层取决于你所使用的 Common Lisp 实现
在这个假定的实现环境中，输入 :abort 跳出：

#+begin_src lisp
  > (/ 1 0)
  Error: Division by zero
	Options: :abort, :backtrace
  >> :abort
  >
#+end_src


* quote

** WHAT

一个不遵守 Common Lisp 求值规则的操作符是 quote
quote 是一个特殊的操作符，意味着它自己有一套特别的求值规则
这个规则就是：什么也不做。 quote 操作符接受一个实参，并完封不动地返回它

缩写 '
为了方便起见，Common Lisp 定义 ' 作为 quote 的缩写
你可以在任何的表达式前，贴上一个 ' ，与调用 quote 是同样的效果

** EXAMPLE

#+begin_src lisp
  > (quote (+ 3 5))
  (+ 3 5)

  > '(+ 3 5)
  (+ 3 5)
#+end_src

** WHY

如果一个列表被引用了，则求值规则对列表自身来求值；如果没有被引用，则列表被视为是代码，依求值规则对列表求值后，返回它的值

#+begin_src lisp
  > (list '(+ 2 1) (+ 2 1))
  ((+ 2 1) 3)
#+end_src

这里第一个实参被引用了，所以产生一个列表
第二个实参没有被引用，视为函数调用，经求值后得到一个数字


* 数据 (Data)

** WHAT
整数(integer)、字符串(string)、符号(symbol)、列表(lists)

*** 符号 (symbol)

**** WHAT

符号是英语的单词 (words)，无论你怎么输入，通常会被转换为大写

#+begin_src lisp
  > 'Artichoke
  ARTICHOKE
#+end_src

符号（通常）不对自身求值，所以要是想引用符号，应该像上例那样用 ' 引用它

*** 列表

**** WHAT

列表是函数
列表是由被括号包住的零个或多个元素来表示
元素可以是任何类型，包含列表本身
使用列表必须要引用，不然 Lisp 会以为这是个函数调用：

#+begin_src lisp
  > '(my 3 "Sons")
  (MY 3 "Sons")
  > '(the list (a b c) has 3 elements)
  (THE LIST (A B C) HAS 3 ELEMENTS)
#+end_src

注意引号保护了整个表达式（包含内部的子表达式）被求值

你可以调用 list 来创建列表。由于 list 是函数，所以它的实参会被求值
这里我们看一个在函数 list 调用里面，调用 + 函数的例子：

#+begin_src lisp
  > (list 'my (+ 2 1) "Sons")
  (MY 3 "Sons")
#+end_src

空列表
在 Common Lisp 里有两种方法来表示空列表
你可以用一对不包括任何东西的括号来表示，或用符号 nil 来表示空表
你用哪种表示法来表示空表都没关系，但它们都会被显示为 nil ：

#+begin_src lisp
  > ()
  NIL
  > nil
  NIL
#+end_src

你不需要引用 nil （但引用也无妨），因为 nil 是对自身求值的


* 列表操作 (List Operations)

** WHAT

用函数 cons 来构造列表
如果传入的第二个实参是列表，则返回由两个实参所构成的新列表，新列表为第一个实参加上第二个实参：

#+begin_src lisp
  > (cons 'a '(b c d))
  (A B C D)
#+end_src

可以通过把新元素建立在空表之上，来构造一个新列表
上一节所看到的函数 list ，不过就是一个把几个元素加到 nil 上的快捷方式

#+begin_src lisp
  > (cons 'a (cons 'b nil))
  (A B)

  > (list 'a 'b)
  (A B)

  > (cons 'a 'b)
  (a . b)
#+end_src

取出列表元素的基本函数是 car 和 cdr
对列表取 car 返回第一个元素，而对列表取 cdr 返回第一个元素之后的所有元素：

#+begin_src lisp
  > (car '(a b c))
  A
  > (cdr '(a b c))
  (B C)
#+end_src

你可以把 car 与 cdr 混合使用来取得列表中的任何元素
如果我们想要取得第三个元素，我们可以

#+begin_src lisp
  > (car (cdr (cdr '(a b c d))))
  C
#+end_src

不过，你可以用更简单的 third 来做到同样的事情：

#+begin_src lisp
  > (third '(a b c d))
  C
#+end_src



* 真与假 (Truth)

** WHAT

在 Common Lisp 里，符号 t 是表示逻辑 真 的缺省值。与 nil 相同， t 也是对自身求值的
如果实参是一个列表，则函数 listp 返回 真 ：

#+begin_src lisp
  > (listp '(a b c))
  T
#+end_src

函数的返回值将会被解释成逻辑 真 或逻辑 假 时，则称此函数为谓词（predicate）
在 Common Lisp 里，谓词的名字通常以 p 结尾

逻辑 假 在 Common Lisp 里，用 nil ，即空表来表示
如果我们传给 listp 的实参不是列表，则返回 nil

#+begin_src lisp
  > (listp 27)
  NIL
#+end_src

由于 nil 在 Common Lisp 里扮演两个角色，如果实参是一个空表，则函数 null 返回 真

#+begin_src lisp
  > (null nil)
  T
#+end_src

而如果实参是逻辑 假 ，则函数 not 返回 真 ：

#+begin_src lisp
  > (not nil)
  T
#+end_src

null 与 not 做的是一样的事情。

在 Common Lisp 里，最简单的条件式是 if
通常接受三个实参：一个 test 表达式，一个 then 表达式和一个 else 表达式
若 test 表达式求值为逻辑 真 ，则对 then 表达式求值，并返回这个值。若 test 表达式求值为逻辑 假 ，则对 else 表达式求值，并返回这个值：

#+begin_src lisp
  > (if (listp '(a b c))
	(+ 1 2)
	(+ 5 6))
  3
  
  >;如果我们传给 listp 的实参不是列表，则返回 nil
  >(if (listp 27)
	(+ 1 2)
	(+ 5 6))
  11
#+end_src

与 quote 相同， if 是特殊的操作符
不能用函数来实现，因为实参在函数调用时永远会被求值，而 if 的特点是，只有最后两个实参的其中一个会被求值
if 的最后一个实参是选择性的。如果忽略它的话，缺省值是 nil ：

#+begin_src lisp
  > (if (listp 27)
       (+ 1 2))
  NIL
#+end_src

虽然 t 是逻辑 真 的缺省表示法，任何非 nil 的东西，在逻辑的上下文里通通被视为 真 。

#+begin_src lisp
  > (if 27 1 2)
  1
#+end_src

逻辑操作符 and 和 or 与条件式类似
两者都接受任意数量的实参，但仅对能影响返回值的几个实参求值
如果所有的实参都为 真 （即非 nil ），那么 and 会返回最后一个实参的值：

#+begin_src lisp
  > (and t (+ 1 2))
  3
#+end_src

如果其中一个实参为 假 ，那之后的所有实参都不会被求值
or 也是如此，只要碰到一个为 真 的实参，就停止对之后所有的实参求值

以上这两个操作符称为宏
宏和特殊的操作符一样，可以绕过一般的求值规则。第十章解释了如何编写你自己的宏


* 函数 (Functions)

** WHAT

你可以用 defun 来定义新函数
通常接受三个以上的实参：一个名字，一组用列表表示的实参，以及一个或多个组成函数体的表达式
我们可能会这样定义 third ：

#+begin_src lisp
  > (defun our-third (x)
     (car (cdr (cdr x))))
  OUR-THIRD
#+end_src

第一个实参说明此函数的名称将是 our-third
第二个实参，一个列表 (x) ，说明这个函数会接受一个形参： x 。这样使用的占位符符号叫做变量
当变量代表了传入函数的实参时，如这里的 x ，又被叫做形参

定义的剩余部分， (car (cdr (cdr x))) ，即所谓的函数主体
它告诉 Lisp 该怎么计算此函数的返回值
所以调用一个 our-third 函数，对于我们作为实参传入的任何 x ，会返回 (car (cdr (cdr x))) ：

#+begin_src lisp
  > (our-third '(a b c d))
  C
#+end_src

既然我们已经讨论过了变量，理解符号是什么就更简单了
符号是变量的名字，符号本身就是以对象的方式存在
这也是为什么符号，必须像列表一样被引用
列表必须被引用，不然会被视为代码
符号必须要被引用，不然会被当作变量

你可以把函数定义想成广义版的 Lisp 表达式。下面的表达式测试 1 和 4 的和是否大于 3 ：

#+begin_src lisp
  > (> (+ 1 4) 3)
  T
#+end_src

通过将这些数字替换为变量，我们可以写个函数，测试任两数之和是否大于第三个数：

#+begin_src lisp
  > (defun sum-greater (x y z)
     (> (+ x y) z))
  SUM-GREATER
  > (sum-greater 1 4 3)
  T
#+end_src

Lisp 不对程序、过程以及函数作区别
函数做了所有的事情（事实上，函数是语言的主要部分）
如果你想要把你的函数之一作为主函数（main function），可以这么做，但平常你就能在顶层中调用任何函数
这表示当你编程时，你可以把程序拆分成一小块一小块地来做调试。



* 递归 (Recursion)

** WHAT

上一节我们所定义的函数，调用了别的函数来帮它们做事。比如 sum-greater 调用了 + 和 >
函数可以调用任何函数，包括自己。自己调用自己的函数是递归的
Common Lisp 函数 member ，测试某个东西是否为列表的成员
下面是定义成递归函数的简化版：

#+begin_src lisp
  > (defun our-member (obj lst)
     (if (null lst)
	 nil
     (if (eql (car lst) obj)
	 lst
	 (our-member obj (cdr lst)))))
  OUR-MEMBER
#+end_src

谓词 eql 测试它的两个实参是否相等；此外，这个定义的所有东西我们之前都学过了。下面是运行的情形：

#+begin_src lisp
  > (our-member 'b '(a b c))
  (B C)
  > (our-member 'z '(a b c))
  NIL
#+end_src

下面是 our-member 的定义对应到英语的描述。为了知道一个对象 obj 是否为列表 lst 的成员，我们

1. 首先检查 lst 列表是否为空列表。如果是空列表，那 obj 一定不是它的成员，结束
2. 否则，若 obj 是列表的第一个元素时，则它是列表的成员
3. 不然只有当 obj 是列表其余部分的元素时，它才是列表的成员

当你想要了解递归函数是怎么工作时，把它翻成这样的叙述有助于你理解

起初，许多人觉得递归函数很难理解。大部分的理解难处，来自于对函数使用了错误的比喻
人们倾向于把函数理解为某种机器
原物料像实参一样抵达；某些工作委派给其它函数；最后组装起来的成品，被作为返回值运送出去
如果我们用这种比喻来理解函数，那递归就自相矛盾了。机器怎可以把工作委派给自己？它已经在忙碌中了

较好的比喻是，把函数想成一个处理的过程
在过程里，递归是在自然不过的事情了
日常生活中我们经常看到递归的过程
举例来说，假设一个历史学家，对欧洲历史上的人口变化感兴趣。研究文献的过程很可能是：

1. 取得一个文献的复本
2. 寻找关于人口变化的资讯
3. 如果这份文献提到其它可能有用的文献，研究它们。

过程是很容易理解的，而且它是递归的，因为第三个步骤可能带出一个或多个同样的过程

所以，别把 our-member 想成是一种测试某个东西是否为列表成员的机器
而是把它想成是，决定某个东西是否为列表成员的规则
如果我们从这个角度来考虑函数，那么递归的矛盾就不复存在了


* 阅读 Lisp (Reading Lisp)

** WHAT

上一节我们所定义的 our-member 以五个括号结尾
更复杂的函数定义更可能以七、八个括号结尾
刚学 Lisp 的人看到这么多括号会感到气馁。这叫人怎么读这样的程序，更不用说编了？怎么知道哪个括号该跟哪个匹配？

答案是，你不需要这么做
Lisp 程序员用缩排来阅读及编写程序，而不是括号
当他们在写程序时，他们让文字编辑器显示哪个括号该与哪个匹配
任何好的文字编辑器，特别是 Lisp 系统自带的，都应该能做到括号匹配（paren-matching）
在这种编辑器中，当你输入一个括号时，编辑器指出与其匹配的那一个
如果你的编辑器不能匹配括号，别用了，想想如何让它做到，因为没有这个功能，你根本不可能编 Lisp 程序
（在 vi，你可以用 :set sm 来启用括号匹配。在 Emacs，M-x lisp-mode 是一个启用的好方法）

有了好的编辑器之后，括号匹配不再会是问题
而且由于 Lisp 缩排有通用的惯例，阅读程序也不是个问题
因为所有人都使用一样的习惯，你可以忽略那些括号，通过缩排来阅读程序

任何有经验的 Lisp 黑客，会发现如果是这样的 our-member 的定义很难阅读：

#+begin_src lisp
  (defun our-member (obj lst) (if (null lst) nil (if (eql (car lst) obj) lst (our-member obj (cdr lst)))))
#+end_src

但如果程序适当地缩排时，他就没有问题了
可以忽略大部分的括号而仍能读懂它：

#+begin_src lisp
  defun our-member (obj lst)
   if null lst
      nil
      if eql (car lst) obj
	 lst
  our-member obj (cdr lst)
#+end_src

事实上，这是你在纸上写 Lisp 程序的实用方法
等输入程序至计算机的时候，可以利用编辑器匹配括号的功能


* 输入输出 (Input and Output)

** WHAT

到目前为止，我们已经利用顶层偷偷使用了 I/O
对实际的交互程序来说，这似乎还是不太够
在这一节，我们来看几个输入输出的函数

最普遍的 Common Lisp 输出函数是 format
接受两个或两个以上的实参
第一个实参决定输出要打印到哪里，第二个实参是字符串模版
而剩余的实参，通常是要插入到字符串模版，用打印表示法（printed representation）所表示的对象
下面是一个典型的例子：

#+begin_src lisp
  > (format t "~A plus ~A equals ~A. ~%" 2 3 (+ 2 3))
  2 plus 3 equals 5.
  NIL
#+end_src

注意到有两个东西被打印出来
第一行是 format 印出来的
第二行是调用 format 函数的返回值，就像平常顶层会打印出来的一样
通常像 format 这种函数不会直接在顶层调用，而是在程序内部里使用，所以返回值不会被看到

format 的第一个实参 t ，表示输出被送到缺省的地方去
通常是顶层。第二个实参是一个用作输出模版的字符串
在这字符串里，每一个 ~A 表示了被填入的位置，而 ~% 表示一个换行。这些被填入的位置依序由后面的实参填入

标准的输入函数是 read
当没有实参时，会读取缺省的位置，通常是顶层
下面这个函数，提示使用者输入，并返回任何输入的东西：

#+begin_src lisp
  (defun askme (string)
   (format t "~A" string)
   (read))
#+end_src

它的行为如下：

#+begin_src lisp
  > (askme "How old are you?")
  How old are you?29

  29
#+end_src

记住 read 会一直永远等在这里，直到你输入了某些东西，并且（通常要）按下回车
因此，不打印明确的提示信息是很不明智的，程序会给人已经死机的印象，但其实它是在等待输入

第二件关于 read 所需要知道的事是，它很强大： read 是一个完整的 Lisp 解析器（parser）
不仅是可以读入字符，然后当作字符串返回它们
它解析它所读入的东西，并返回产生出来的 Lisp 对象
在上述的例子，它返回一个数字

askem 的定义虽然很短，但体现出一些我们在之前的函数没看过的东西
函数主体可以有不只一个表达式
函数主体可以有任意数量的表达式
当函数被调用时，会依序求值，函数会返回最后一个的值

在之前的每一节中，我们坚持所谓“纯粹的” Lisp ── 即没有副作用的 Lisp
副作用是指，表达式被求值后，对外部世界的状态做了某些改变
当我们对一个如 (+ 1 2) 这样纯粹的 Lisp 表达式求值时，没有产生副作用
它只返回一个值。但当我们调用 format 时，它不仅返回值，还印出了某些东西，这就是一种副作用

当我们想要写没有副作用的程序时，则定义多个表达式的函数主体就没有意义了
最后一个表达式的值，会被当成函数的返回值，而之前表达式的值都被舍弃了
如果这些表达式没有副作用，你没有任何理由告诉 Lisp ，为什么要去对它们求值
